// Generated by Dagger (https://google.github.io/dagger).
package com.abhijit.truecaller_assingment.ui.mainui;

import com.abhijit.truecaller_assingment.data.DataManager;
import com.abhijit.truecaller_assingment.util.rx.SchedulerProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

public final class MainActivityModule_ProvideMainViewModelFactory
    implements Factory<MainActivityModel> {
  private final MainActivityModule module;

  private final Provider<DataManager> dataManagerProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  public MainActivityModule_ProvideMainViewModelFactory(
      MainActivityModule module,
      Provider<DataManager> dataManagerProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    this.module = module;
    this.dataManagerProvider = dataManagerProvider;
    this.schedulerProvider = schedulerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
  }

  @Override
  public MainActivityModel get() {
    return Preconditions.checkNotNull(
        module.provideMainViewModel(
            dataManagerProvider.get(), schedulerProvider.get(), compositeDisposableProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MainActivityModule_ProvideMainViewModelFactory create(
      MainActivityModule module,
      Provider<DataManager> dataManagerProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    return new MainActivityModule_ProvideMainViewModelFactory(
        module, dataManagerProvider, schedulerProvider, compositeDisposableProvider);
  }

  public static MainActivityModel proxyProvideMainViewModel(
      MainActivityModule instance,
      DataManager dataManager,
      SchedulerProvider schedulerProvider,
      CompositeDisposable compositeDisposable) {
    return Preconditions.checkNotNull(
        instance.provideMainViewModel(dataManager, schedulerProvider, compositeDisposable),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
