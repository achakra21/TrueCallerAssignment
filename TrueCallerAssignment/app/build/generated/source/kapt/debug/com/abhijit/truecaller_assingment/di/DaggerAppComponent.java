// Generated by Dagger (https://google.github.io/dagger).
package com.abhijit.truecaller_assingment.di;

import android.app.Activity;
import android.app.Application;
import android.arch.lifecycle.ViewModelProvider;
import com.abhijit.truecaller_assingment.TrueCallerAssingment;
import com.abhijit.truecaller_assingment.TrueCallerAssingment_MembersInjector;
import com.abhijit.truecaller_assingment.data.DataManager;
import com.abhijit.truecaller_assingment.data.DataManagerImplementation_Factory;
import com.abhijit.truecaller_assingment.data.remote.ApiDataHelper;
import com.abhijit.truecaller_assingment.di.modules.AppModule;
import com.abhijit.truecaller_assingment.di.modules.AppModule_ApiDataHelperProviderFactory;
import com.abhijit.truecaller_assingment.di.modules.AppModule_CompositeDisposableProviderFactory;
import com.abhijit.truecaller_assingment.di.modules.AppModule_DataManagerProviderFactory;
import com.abhijit.truecaller_assingment.di.modules.AppModule_ScheduleProviderFactory;
import com.abhijit.truecaller_assingment.di.modules.BuildersModule_BindMainActivity;
import com.abhijit.truecaller_assingment.di.modules.NetworkModule;
import com.abhijit.truecaller_assingment.di.modules.NetworkModule_ProvideCache$app_debugFactory;
import com.abhijit.truecaller_assingment.di.modules.NetworkModule_ProvideHttpLoggingInterceptorFactory;
import com.abhijit.truecaller_assingment.di.modules.NetworkModule_ProvideOkHttpClientFactory;
import com.abhijit.truecaller_assingment.di.modules.NetworkModule_ProvideRetrofitFactory;
import com.abhijit.truecaller_assingment.ui.mainui.MainActivity;
import com.abhijit.truecaller_assingment.ui.mainui.MainActivityModel;
import com.abhijit.truecaller_assingment.ui.mainui.MainActivityModule;
import com.abhijit.truecaller_assingment.ui.mainui.MainActivityModule_ProvideMainViewModelFactory;
import com.abhijit.truecaller_assingment.ui.mainui.MainActivityModule_ProvideMainViewModelFactoryFactory;
import com.abhijit.truecaller_assingment.ui.mainui.MainActivity_MembersInjector;
import com.abhijit.truecaller_assingment.util.rx.SchedulerProvider;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<BuildersModule_BindMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<Cache> provideCache$app_debugProvider;

  private Provider<HttpLoggingInterceptor> provideHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiDataHelper> apiDataHelperProvider;

  private DataManagerImplementation_Factory dataManagerImplementationProvider;

  private Provider<DataManager> dataManagerProvider;

  private Provider<SchedulerProvider> scheduleProvider;

  private Provider<CompositeDisposable> compositeDisposableProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<BuildersModule_BindMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public BuildersModule_BindMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideCache$app_debugProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideCache$app_debugFactory.create(
                builder.networkModule, applicationProvider));
    this.provideHttpLoggingInterceptorProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideHttpLoggingInterceptorFactory.create(builder.networkModule));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideOkHttpClientFactory.create(
                builder.networkModule,
                provideCache$app_debugProvider,
                provideHttpLoggingInterceptorProvider));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideRetrofitFactory.create(
                builder.networkModule, provideOkHttpClientProvider));
    this.apiDataHelperProvider =
        DoubleCheck.provider(
            AppModule_ApiDataHelperProviderFactory.create(
                builder.appModule, provideRetrofitProvider));
    this.dataManagerImplementationProvider =
        DataManagerImplementation_Factory.create(apiDataHelperProvider);
    this.dataManagerProvider =
        DoubleCheck.provider(
            AppModule_DataManagerProviderFactory.create(
                builder.appModule, dataManagerImplementationProvider));
    this.scheduleProvider =
        DoubleCheck.provider(AppModule_ScheduleProviderFactory.create(builder.appModule));
    this.compositeDisposableProvider =
        DoubleCheck.provider(
            AppModule_CompositeDisposableProviderFactory.create(builder.appModule));
  }

  @Override
  public void inject(TrueCallerAssingment app) {
    injectTrueCallerAssingment(app);
  }

  private TrueCallerAssingment injectTrueCallerAssingment(TrueCallerAssingment instance) {
    TrueCallerAssingment_MembersInjector.injectActivityDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private NetworkModule networkModule;

    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends BuildersModule_BindMainActivity.MainActivitySubcomponent.Builder {
    private MainActivityModule mainActivityModule;

    private MainActivity seedInstance;

    @Override
    public BuildersModule_BindMainActivity.MainActivitySubcomponent build() {
      if (mainActivityModule == null) {
        this.mainActivityModule = new MainActivityModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements BuildersModule_BindMainActivity.MainActivitySubcomponent {
    private MainActivityModule mainActivityModule;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private MainActivityModel getMainActivityModel() {
      return MainActivityModule_ProvideMainViewModelFactory.proxyProvideMainViewModel(
          mainActivityModule,
          DaggerAppComponent.this.dataManagerProvider.get(),
          DaggerAppComponent.this.scheduleProvider.get(),
          DaggerAppComponent.this.compositeDisposableProvider.get());
    }

    private ViewModelProvider.Factory getFactory() {
      return MainActivityModule_ProvideMainViewModelFactoryFactory.proxyProvideMainViewModelFactory(
          mainActivityModule, getMainActivityModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.mainActivityModule = builder.mainActivityModule;
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectMViewModelFactory(instance, getFactory());
      return instance;
    }
  }
}
